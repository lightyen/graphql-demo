# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - schema/**/*.gql

# Where should the generated server code go?
exec:
  filename: graphql/generated/generated.go
  package: generated

# Uncomment to enable federation
# federation:
#   filename: graph/generated/federation.go
#   package: generated

# Where should any generated models go?
model:
  filename: graphql/generated/models_gen.go
  package: generated

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: graphql
  package: graphql
  filename: graphql/resolver.go

# Optional: turn on use `gqlgen:"fieldName"` tags in your models
struct_tag: gqlgen

# Optional: turn on to use []Thing instead of []*Thing
omit_slice_element_pointers: true

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
# autobind:
#   - "app/common"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  Bool:
    model: app/common.Bool
  Int64:
    model: app/common.Int64
  Int32:
    model: app/common.Int32
  Int16:
    model: app/common.Int16
  Int8:
    model: app/common.Int8
  Void:
    model: app/common.Void
  Upload:
    model: github.com/99designs/gqlgen/graphql.Upload
  IP:
    model: app/common.IP
  Time:
    model: app/common.Time
  Device:
    model: app/common.Device
    fields:
      ip:
        resolver: true
      now:
        resolver: true
      description:
        resolver: true
  Operations:
    fields:
      show:
        resolver: true