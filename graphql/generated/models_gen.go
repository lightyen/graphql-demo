// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"fmt"
	"io"
	"strconv"
)

type Operations struct {
	Show *int `json:"show"`
}

type UserLoginInput struct {
	Username string  `json:"username"`
	Password *string `json:"password"`
}

type RoleEnumType string

const (
	RoleEnumTypeAdministrator RoleEnumType = "ADMINISTRATOR"
	RoleEnumTypeNormal        RoleEnumType = "NORMAL"
)

var AllRoleEnumType = []RoleEnumType{
	RoleEnumTypeAdministrator,
	RoleEnumTypeNormal,
}

func (e RoleEnumType) IsValid() bool {
	switch e {
	case RoleEnumTypeAdministrator, RoleEnumTypeNormal:
		return true
	}
	return false
}

func (e RoleEnumType) String() string {
	return string(e)
}

func (e *RoleEnumType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleEnumType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleEnumType", str)
	}
	return nil
}

func (e RoleEnumType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
